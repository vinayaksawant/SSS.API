// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSS.API.Data;

#nullable disable

namespace SSS.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240211221757_updated jobskill as string in Jobskill Domain model")]
    partial class updatedjobskillasstringinJobskillDomainmodel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeEmployer", b =>
                {
                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PastEmployersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeesId", "PastEmployersId");

                    b.HasIndex("PastEmployersId");

                    b.ToTable("EmployeeEmployer");
                });

            modelBuilder.Entity("JobCategoryJobPosting", b =>
                {
                    b.Property<Guid>("JobCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobPostingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobCategoriesId", "JobPostingsId");

                    b.HasIndex("JobPostingsId");

                    b.ToTable("JobCategoryJobPosting");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Address", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Takula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MemberId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.BlogImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentEmployerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberCandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileImagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("YearsOfExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentEmployerId");

                    b.HasIndex("MemberCandidateId");

                    b.HasIndex("ProfileImagesId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobPostingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Email", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("MemberId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberEmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Employer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberOrganizationId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageFileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.ToTable("ImageFiles");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.JobCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.JobPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturedImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobPostings");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.JobSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobPostingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobPostingId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("JobPostingId1");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.LinkHandle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobPostingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LinkHandleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkHandleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkHandleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkHandleUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("LinkHandles");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Individual")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Phone", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneAreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneLocalStdIsd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MemberId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("EmployeeEmployer", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSS.API.Models.Domain.Employer", null)
                        .WithMany()
                        .HasForeignKey("PastEmployersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobCategoryJobPosting", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.JobCategory", null)
                        .WithMany()
                        .HasForeignKey("JobCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSS.API.Models.Domain.JobPosting", null)
                        .WithMany()
                        .HasForeignKey("JobPostingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Address", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Member", null)
                        .WithMany("Addresses")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Candidate", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Employer", "CurrentEmployer")
                        .WithMany()
                        .HasForeignKey("CurrentEmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSS.API.Models.Domain.Member", "MemberCandidate")
                        .WithMany()
                        .HasForeignKey("MemberCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSS.API.Models.Domain.ImageFile", "ProfileImages")
                        .WithMany()
                        .HasForeignKey("ProfileImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentEmployer");

                    b.Navigation("MemberCandidate");

                    b.Navigation("ProfileImages");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Document", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Candidate", null)
                        .WithMany("Documents")
                        .HasForeignKey("CandidateId");

                    b.HasOne("SSS.API.Models.Domain.Employee", null)
                        .WithMany("Documents")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SSS.API.Models.Domain.Employer", null)
                        .WithMany("Documents")
                        .HasForeignKey("EmployerId");

                    b.HasOne("SSS.API.Models.Domain.JobPosting", null)
                        .WithMany("Documents")
                        .HasForeignKey("JobPostingId");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Email", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Member", null)
                        .WithMany("Emails")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Employee", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Member", "MemberEmployee")
                        .WithMany()
                        .HasForeignKey("MemberEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberEmployee");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Employer", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Member", "MemberOrganization")
                        .WithMany()
                        .HasForeignKey("MemberOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberOrganization");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.ImageFile", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Candidate", null)
                        .WithMany("ImageFiles")
                        .HasForeignKey("CandidateId");

                    b.HasOne("SSS.API.Models.Domain.Employee", null)
                        .WithMany("ImageFiles")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SSS.API.Models.Domain.Employer", null)
                        .WithMany("ImageFiles")
                        .HasForeignKey("EmployerId");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.JobSkill", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Candidate", null)
                        .WithMany("ExperienceJobSkills")
                        .HasForeignKey("CandidateId");

                    b.HasOne("SSS.API.Models.Domain.Employee", null)
                        .WithMany("ExperienceJobSkills")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SSS.API.Models.Domain.JobPosting", null)
                        .WithMany("GoodToHaveJobSkills")
                        .HasForeignKey("JobPostingId");

                    b.HasOne("SSS.API.Models.Domain.JobPosting", null)
                        .WithMany("RequiredJobSkills")
                        .HasForeignKey("JobPostingId1");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.LinkHandle", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Candidate", null)
                        .WithMany("LinkHandles")
                        .HasForeignKey("CandidateId");

                    b.HasOne("SSS.API.Models.Domain.Employee", null)
                        .WithMany("LinkHandles")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SSS.API.Models.Domain.Employer", null)
                        .WithMany("LinkHandles")
                        .HasForeignKey("EmployerId");

                    b.HasOne("SSS.API.Models.Domain.JobPosting", null)
                        .WithMany("LinkHandles")
                        .HasForeignKey("JobPostingId");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Phone", b =>
                {
                    b.HasOne("SSS.API.Models.Domain.Member", null)
                        .WithMany("Phones")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Candidate", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ExperienceJobSkills");

                    b.Navigation("ImageFiles");

                    b.Navigation("LinkHandles");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Employee", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ExperienceJobSkills");

                    b.Navigation("ImageFiles");

                    b.Navigation("LinkHandles");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Employer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ImageFiles");

                    b.Navigation("LinkHandles");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.JobPosting", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("GoodToHaveJobSkills");

                    b.Navigation("LinkHandles");

                    b.Navigation("RequiredJobSkills");
                });

            modelBuilder.Entity("SSS.API.Models.Domain.Member", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
